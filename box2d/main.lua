function love.load()
   -- the height of a meter our worlds will be 64px
   love.physics.setMeter(64)
   world = love.physics.newWorld(0, 9.81*64, true)

   objects = {}
   objects.ground = {}
   objects.ground.body = love.physics.newBody(world, 650/2, 650-50/2)
   objects.ground.shape = love.physics.newRectangleShape(650, 50)
   objects.ground.fixture = love.physics.newFixture(objects.ground.body, objects.ground.shape)

   objects.top = {}
   objects.top.body = love.physics.newBody(world, 650/2, 0)
   objects.top.shape = love.physics.newRectangleShape(650, 50)
   objects.top.fixture = love.physics.newFixture(objects.top.body, objects.top.shape)

   objects.left = {}
   objects.left.body = love.physics.newBody(world, 0, 650/2)
   objects.left.shape = love.physics.newRectangleShape(50, 650)
   objects.left.fixture = love.physics.newFixture(objects.left.body, objects.left.shape)

   objects.right = {}
   objects.right.body = love.physics.newBody(world, 650, 650/2)
   objects.right.shape = love.physics.newRectangleShape(50, 650)
   objects.right.fixture = love.physics.newFixture(objects.right.body, objects.right.shape)


   -- let's create a ball
   objects.ball = {}
   -- place the body in the center of the world and make it dynamic, so
   -- it can move around
   objects.ball.body = love.physics.newBody(world, 650/2, 650/2, "dynamic")
   -- the ball's shape has a radius of 20
   objects.ball.shape = love.physics.newCircleShape(20)
   -- Attach fixture to body and give it a density of 1.
   objects.ball.fixture = love.physics.newFixture(objects.ball.body, objects.ball.shape, 1)
   objects.ball.fixture:setRestitution(0.4) -- let the ball bounce

   -- let's create a couple blocks to play around with

   objects.blocks = {}
   for i=1, 20 do
      local block = {
	 body = love.physics.newBody(
	    world,
	    50 + love.math.random()*600,
	    50 + love.math.random()*600, "dynamic"),
	 shape = love.physics.newRectangleShape(0, 0, 50, 50)
      }
      block.fixture = love.physics.newFixture(block.body, block.shape, love.math.random()*1)
      table.insert(objects.blocks, block)
   end

   love.graphics.setBackgroundColor(0.41, 0.53, 0.97)
   love.window.setMode(650, 650) -- set the window dimensions to 650 by 650

   ppm = 64
end


function love.update(dt)
   world:update(dt) -- this puts the world into motion

   -- here we are going to create some keyboard events
   -- press the right arrow key to push the ball to the right
   if love.keyboard.isDown("right") then
      objects.ball.body:applyForce(400, 0)
      -- press the left arrow key to push the ball to the left
   elseif love.keyboard.isDown("left") then
      objects.ball.body:applyForce(-400, 0)
      -- press the up arrow key to set the ball in the air
   elseif love.keyboard.isDown("up") then
      objects.ball.body:applyForce(0, -400)
   elseif love.keyboard.isDown("down") then
      objects.ball.body:applyForce(0, 400)
      -- we must set the velocity to zero to prevent a potentially large
      -- velocity generated by the change in position
      --objects.ball.body:setLinearVelocity(0, 0)
   end
end

function drawBlock(thing)
   local d = thing.fixture:getDensity()
   love.graphics.setColor(0.20*(d*3), 0.20, 0.20)
   love.graphics.polygon("fill", thing.body:getWorldPoints(thing.shape:getPoints()))
   love.graphics.setColor(1, 0.5, 0.20)
   love.graphics.setLineWidth(3)
   love.graphics.polygon("line", thing.body:getWorldPoints(thing.shape:getPoints()))
end

function drawCircle(circle)
   love.graphics.setColor(0.20, 0.20, 0.20)
   love.graphics.circle("fill", circle.body:getX(), circle.body:getY(), circle.shape:getRadius())
   love.graphics.setColor(1, 0.5, 0.20)
   love.graphics.setLineWidth(3)
   love.graphics.circle("line", circle.body:getX(), circle.body:getY(), circle.shape:getRadius())
end

function love.draw()
   drawBlock(objects.top)
   drawBlock(objects.ground)
   drawBlock(objects.left)
   drawBlock(objects.right)
   drawCircle(objects.ball)
   for i =1, #objects.blocks do
      drawBlock(objects.blocks[i])
   end
end
